#!/usr/bin/env node

var fs        = require('fs');
var path      = require('path');
var strip     = require('strip-json-comments');
var chalk     = require('chalk');
var filepaths = require('filepaths');
var program   = require('commander');
var Inspector = require('../lib/inspector');
var reporters = require('../lib/reporters');

var summary = `
  Detect copy-pasted and structurally similar JavaScript code
  Example use: detect-copy-paste -I -L -t 20 --ignore "test" ./path/to/src
`;

program
  .version(require('../package.json').version)
  .usage('[options] <paths ...>\n\n' + summary)
  .option('-t, --threshold <number>',
    'number of nodes (default: 30)', parseInt)
  .option('-m, --min-instances <number>',
    'min instances for a match (default: 2)', parseInt)
  .option('-c, --config [config]',
    'path to config file [.dcprc]', '.dcprc')
  .option('-r, --reporter [default|json|pmd]',
    'specify the reporter to use')
  .option('-I, --no-identifiers', 'do not match identifiers')
  .option('-L, --no-literals', 'do not match literals')
  .option('-C, --no-color', 'disable colors')
  .option('--ignore <pattern>', 'ignore paths matching a regex')
  .option('--truncate <number>',
    'length to truncate lines (default: 100, off: 0)', parseInt)
  .option('--debug', 'print debug information')
  .parse(process.argv);

// Check and parse the config file, if it exists
var rcPath = path.resolve(process.cwd(), program.config);
var opts = {encoding: 'utf8'};
var rcContents, rc, paths;

if (fs.existsSync(rcPath) && fs.lstatSync(rcPath).isFile()) {
  try {
    rcContents = strip(fs.readFileSync(rcPath, opts));
    rc = JSON.parse(rcContents);
  } catch (e) {
    console.log('Invalid config file:', e.message);
    process.exit(3);
  }

  ['threshold', 'identifiers', 'literals', 'ignore', 'minInstances',
   'reporter', 'truncate'].forEach((option) => {
    if (program[option] === undefined && (option in rc)) {
      program[option] = rc[option];
    }
  });
}

// Assume all unconsumed arguments are paths
var suppliedPaths = (program.args.length) ? program.args : ['.'];

// chalk doesn't support short flags by default
if (!program.color) {
  chalk.enabled = false;
}

// Set debug based on flag
process.env.DEBUG = program.debug || '';

// By default, ignore deps and tests
var ignorePatterns = ['node_modules', 'bower_components', 'test', 'spec'];
if (program.ignore) {
  ignorePatterns.push(program.ignore);
}

var extensions = ['.js', '.jsx'];
try {
  paths = filepaths.getSync(suppliedPaths, {
    ext: extensions,
    ignore: ignorePatterns
  });
} catch(e) {
  console.log(e.message);
  process.exit(4);
}

if (!paths.length) {
  console.log(`No ${extensions.join(' ')} files found in the list of paths`);
  process.exit(0);
}

var inspector = new Inspector(paths, {
  threshold:    program.threshold,
  identifiers:  program.identifiers,
  literals:     program.literals,
  minInstances: program.minInstances
});

// Retrieve the requested reporter
var reporterType = reporters[program.reporter] || reporters.default;
new reporterType(inspector, {
  truncate: program.truncate
});

// Track the number of matches
var matches = 0;
inspector.on('match', () => matches++);

try {
  inspector.run();
  process.exit(matches ? 5 : 0);
} catch(err) {
  console.log(err);
  process.exit(1);
}
